import re

def remove_think_tags(text):
    """
    removes think tags from generated deepseek output
    Input: text (with think tags)
    Output: cleaned_text (without think tags)
    """

    # Remove all occurrences of <think>...</think>
    cleaned_text1 = re.sub(r'<think>.*?</think>', '', text, flags=re.DOTALL).strip()
    cleaned_text2 = re.sub(r'^.*?</think>', '', text, flags=re.DOTALL).strip()
    
    if len(cleaned_text1) < len(cleaned_text2):
        return cleaned_text1
    else:
        return cleaned_text2
    
def extract_json(text):
    """
    parses out ```json...``` tags if generated by deepseek
    Input: text (potentially with json tags)
    Output: text without json tags
    """
    # Use regex to remove ```json and ``` markers
    return re.sub(r'^```json\n?|```$', '', text, flags=re.MULTILINE).strip()

def extract_python(text):
    """
    parses out ```python...``` tags if generated by deepseek
    Input: text (potentially with python tags)
    Output: text without python tags
    """
    # Use regex to remove ```python and ``` markers
    return re.sub(r'^```python\n?|```$', '', text, flags=re.MULTILINE).strip()

def parse_string_to_list(input_string):
    """
    ensures triplets are in a list
    Input: input_string (text supposably as a list)
    Output: list of triplets or None if not in list format
    """
    # Step 1: Remove unnecessary whitespace and normalize the input string
    input_string = input_string.strip()
    
    # Step 2: Replace spaces in multi-word entities with camel-case format
    # Example: 'Govee Smart Light Bulbs' -> 'GoveeSmartLightBulbs'
    input_string = re.sub(r"'([a-zA-Z]+(?:\s+[a-zA-Z]+)+)'", 
                          lambda m: f"'{''.join(word.capitalize() for word in m.group(1).split())}'", 
                          input_string)
    
    # Step 3: Evaluate the string to transform it into a Python object (list of tuples)
    try:
        parsed_list = eval(input_string)
    except SyntaxError as e:
        print("Error parsing string:", e)
        return None
    
    # Step 4: Convert each tuple into the expected string format
    result = [
        str(item).replace(" ", "")  # Remove extra spaces for compact formatting
        for item in parsed_list
    ]
    
    return result
